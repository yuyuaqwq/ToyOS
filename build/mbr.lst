     1                                  %include "boot.inc"
     2                              <1> ;----------Loader----------
     3                              <1> LOADER_BASE_ADDR equ 0x900
     4                              <1> LOADER_START_SECTOR equ 0x2
     5                              <1> 
     6                              <1> PAGE_DIR_TABLE_POS equ 0x100000
     7                              <1> 
     8                              <1> ;----------kernel----------
     9                              <1> KERNEL_BIN_BASE_ADDR equ 0x70000
    10                              <1> KERNEL_ENTRY_POINT equ 0xc0001500
    11                              <1> KERNEL_START_SECTOR equ 0x9
    12                              <1> 
    13                              <1> ;----------gtd描述符属性----------
    14                              <1> DESC_G_4K equ (1b << 23)
    15                              <1> DESC_D_32 equ (1b << 22)
    16                              <1> DESC_L equ (0b << 21)      ; 64位代码标记
    17                              <1> DESC_AVL equ (0b << 20)        ; CPU未使用
    18                              <1> DESC_LIMIT_CODE2 equ (0xf << 16)
    19                              <1> DESC_LIMIT_DATA2 equ (0xf << 16)
    20                              <1> DESC_LIMIT_VIDEO2 equ (0x0 << 16)
    21                              <1> DESC_P equ (1b << 15)
    22                              <1> DESC_DPL_0 equ (0x0 << 13)
    23                              <1> DESC_DPL_1 equ (0x1 << 13)
    24                              <1> DESC_DPL_2 equ (0x2 << 13)
    25                              <1> DESC_DPL_3 equ (0x3 << 13)
    26                              <1> DESC_S_CODE equ (1b << 12)
    27                              <1> DESC_S_DATA equ (1b << 12)
    28                              <1> DESC_S_SYS equ (0b << 12)
    29                              <1> DESC_TYPE_CODE equ (0x8 << 8)
    30                              <1> DESC_TYPE_DATA equ (0x2 << 8)
    31                              <1> 
    32                              <1> DESC_CODE_HIGH4 equ ((0x00 << 24) | DESC_G_4K | DESC_D_32 | DESC_L | DESC_AVL | DESC_LIMIT_CODE2 | DESC_P | DESC_DPL_0 | DESC_S_CODE | DESC_TYPE_CODE | 0x00)
    33                              <1> DESC_DATA_HIGH4 equ ((0x00 << 24) | DESC_G_4K | DESC_D_32 | DESC_L | DESC_AVL | DESC_LIMIT_DATA2 | DESC_P | DESC_DPL_0 | DESC_S_DATA | DESC_TYPE_DATA | 0x00)
    34                              <1> DESC_VIDEO_HIGH4 equ ((0x00 << 24) | DESC_G_4K | DESC_D_32 | DESC_L | DESC_AVL | DESC_LIMIT_VIDEO2 | DESC_P | DESC_DPL_0 | DESC_S_DATA | DESC_TYPE_DATA | 0x0b)
    35                              <1> 
    36                              <1> ;----------段选择子属性----------
    37                              <1> RPL0 equ 00b
    38                              <1> RPL1 equ 01b
    39                              <1> RPL2 equ 10b
    40                              <1> RPL3 equ 11b
    41                              <1> TI_GDT equ (0b << 2)
    42                              <1> TI_LDT equ (1b << 2)
    43                              <1> 
    44                              <1> ;----------页表项属性----------
    45                              <1> PG_P equ 1b
    46                              <1> PG_RW_R equ (0b << 1)
    47                              <1> PG_RW_W equ (1b << 1)
    48                              <1> PG_US_S equ (0b << 2)
    49                              <1> PG_US_U equ (1b << 2)
     2                                  
     3                                  SECTION MBR vstart=0x7c00
     4                                  ; 0000:7c00
     5 00000000 8CC8                        mov ax, cs
     6 00000002 8ED8                        mov ds, ax
     7 00000004 8EC0                        mov es, ax
     8 00000006 8ED0                        mov ss, ax
     9 00000008 8EE0                        mov fs, ax
    10 0000000A BC007C                      mov sp, 0x7c00
    11                                  
    12 0000000D B800B8                      mov ax, 0xb800
    13 00000010 8EE8                        mov gs, ax      ; 显存
    14                                  
    15                                  ; 上卷清屏
    16 00000012 B80006                      mov ax, 0x600
    17 00000015 BB0007                      mov bx, 0x700
    18 00000018 B90000                      mov cx, 0
    19 0000001B BA4F18                      mov dx, 0x184f
    20 0000001E CD10                        int 0x10
    21                                  
    22                                  ; 从磁盘中读取Loader
    23 00000020 66B802000000                mov eax, LOADER_START_SECTOR
    24 00000026 BB0009                      mov bx, LOADER_BASE_ADDR
    25 00000029 B90400                      mov cx, 4
    26 0000002C E80300                      call RdDiskM16
    27                                  
    28 0000002F E9(0009)                    jmp LOADER_BASE_ADDR     ; 跳转到Loader起始地址
    29                                  
    30                                  
    31                                  
    32                                  ;------------------------------------
    33                                  ; 从磁盘读取n个扇区
    34                                  ; eax = LBA扇区号
    35                                  ; bx = 缓冲区地址
    36                                  ; cx = 读取扇区数
    37                                  ;------------------------------------
    38                                  RdDiskM16:
    39 00000032 6689C6                      mov esi, eax
    40 00000035 89CF                        mov di, cx
    41                                  
    42                                  ; 1.设置要读取的扇区数
    43 00000037 BAF201                      mov dx, 0x1f2
    44 0000003A 88C8                        mov al, cl
    45 0000003C EE                          out dx, al      ; 读取扇区数
    46 0000003D 6689F0                      mov eax, esi
    47                                  
    48                                  ; 2.将LBA存入0x1f3 ~ 0x1f6
    49                                      ; bit7 ~ bit0
    50 00000040 BAF301                      mov dx, 0x1f3
    51 00000043 EE                          out dx, al
    52                                  
    53                                      ; bit15 ~ bit8
    54 00000044 B108                        mov cl, 8
    55 00000046 66D3E8                      shr eax, cl
    56 00000049 BAF401                      mov dx, 0x1f4
    57 0000004C EE                          out dx, al
    58                                  
    59                                      ; bit23 ~ bit16
    60 0000004D 66D3E8                      shr eax, cl
    61 00000050 BAF501                      mov dx, 0x1f5
    62 00000053 EE                          out dx, al
    63                                  
    64                                      ; bit31 ~ bit24
    65 00000054 66D3E8                      shr eax, cl
    66 00000057 240F                        and al, 0x0f        ; LBA bit27 ~ bit24
    67 00000059 0CE0                        or al, 0xe0         ; bit31 ~ bit28为1110，表示LBA模式
    68 0000005B BAF601                      mov dx, 0x1f6
    69 0000005E EE                          out dx, al
    70                                  
    71                                  ; 3.向0x1f7端口写入读命令，0x20
    72 0000005F BAF701                      mov dx, 0x1f7
    73 00000062 B020                        mov al, 0x20
    74 00000064 EE                          out dx, al
    75                                  
    76                                  ; 4.检测硬盘状态
    77                                  .notReady:
    78                                      ; 同一端口，写时表示写入命令字，读时表示读入硬盘状态
    79 00000065 90                          nop
    80 00000066 EC                          in al, dx
    81 00000067 2488                        and al, 0x88        ; bit4为1表示硬盘控制器已准备好数据，bit7为一表示硬盘忙
    82 00000069 3C08                        cmp al, 0x08
    83 0000006B 75F8                        jnz .notReady       ; 未准备好，继续等待
    84                                  
    85                                  ; 5.从0x1f0端口读数据
    86                                      ; di是要读取的扇区数，一个扇区有512字节，每次读入一个字，需要di*512/2次，所以di*256
    87 0000006D 89F8                        mov ax, di
    88 0000006F BA0001                      mov dx, 256
    89 00000072 F7E2                        mul dx
    90 00000074 89C1                        mov cx, ax
    91                                  
    92 00000076 BAF001                      mov dx, 0x1f0
    93                                  .goOnRead:
    94 00000079 ED                          in ax, dx
    95 0000007A 8907                        mov [bx], ax
    96 0000007C 83C302                      add bx, 2
    97 0000007F E2F8                        loop .goOnRead
    98 00000081 C3                          ret
    99                                  
   100                                  
   101 00000082 00<rep 17Ch>            times 510-($-$$) db 0
   102 000001FE 55AA                    db 0x55,0xaa
